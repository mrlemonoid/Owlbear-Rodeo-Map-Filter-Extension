import PlayerApi from "../api/PlayerApi";
import { AttachmentBehavior, Item, Layer } from "../types/items/Item";
import { Metadata } from "../types/Metadata";
import { Vector2 } from "../types/Vector2";
declare type BuilderItem = Omit<Item, "id" | "lastModified" | "lastModifiedUserId"> & {
    id: string;
    lastModified: string;
    lastModifiedUserId: string;
};
export declare abstract class GenericItemBuilder<B extends GenericItemBuilder<B>> {
    protected _item: BuilderItem;
    constructor(player: PlayerApi);
    createdUserId(createdUserId: string): B;
    id(id: string): B;
    name(name: string): B;
    description(description: string): B;
    lastModified(lastModified: string): B;
    zIndex(zIndex: number): B;
    lastModifiedUserId(lastModifiedUserId: string): B;
    locked(locked: boolean): B;
    metadata(metadata: Metadata): B;
    position(position: Vector2): B;
    rotation(rotation: number): B;
    scale(scale: Vector2): B;
    visible(visible: boolean): B;
    attachedTo(attachedTo: string): B;
    layer(layer: Layer): B;
    disableHit(disable: boolean): B;
    disableAutoZIndex(disable: boolean): B;
    disableAttachmentBehavior(disable: AttachmentBehavior[]): B;
    protected self(): B;
}
export {};
