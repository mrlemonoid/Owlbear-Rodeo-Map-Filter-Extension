export class ImageUploadBuilder {
    constructor(file) {
        this._upload = {
            file,
            grid: {
                dpi: 150,
                offset: { x: 0, y: 0 },
            },
            name: "",
            rotation: 0,
            scale: { x: 1, y: 1 },
            text: {
                richText: [
                    {
                        type: "paragraph",
                        children: [{ text: "" }],
                    },
                ],
                plainText: "",
                style: {
                    padding: 8,
                    fontFamily: "Roboto",
                    fontSize: 24,
                    fontWeight: 400,
                    textAlign: "CENTER",
                    textAlignVertical: "BOTTOM",
                    fillColor: "white",
                    fillOpacity: 1,
                    strokeColor: "white",
                    strokeOpacity: 1,
                    strokeWidth: 0,
                    lineHeight: 1.5,
                },
                type: "PLAIN",
                width: "AUTO",
                height: "AUTO",
            },
            locked: false,
            textItemType: "LABEL",
            visible: true,
        };
    }
    grid(grid) {
        this._upload.grid = grid;
        return this;
    }
    dpi(dpi) {
        this._upload.grid.dpi = dpi;
        return this;
    }
    offset(offset) {
        this._upload.grid.offset = offset;
        return this;
    }
    name(name) {
        this._upload.name = name;
        return this;
    }
    description(description) {
        this._upload.description = description;
        return this;
    }
    rotation(rotation) {
        this._upload.rotation = rotation;
        return this;
    }
    scale(scale) {
        this._upload.scale = scale;
        return this;
    }
    locked(locked) {
        this._upload.locked = locked;
        return this;
    }
    visible(visible) {
        this._upload.visible = visible;
        return this;
    }
    text(text) {
        this._upload.text = text;
        return this;
    }
    textItemType(textItemType) {
        this._upload.textItemType = textItemType;
        return this;
    }
    textWidth(width) {
        this._upload.text.width = width;
        return this;
    }
    textHeight(height) {
        this._upload.text.height = height;
        return this;
    }
    richText(richText) {
        this._upload.text.richText = richText;
        return this;
    }
    plainText(plainText) {
        this._upload.text.plainText = plainText;
        return this;
    }
    textType(textType) {
        this._upload.text.type = textType;
        return this;
    }
    textPadding(padding) {
        this._upload.text.style.padding = padding;
        return this;
    }
    fontFamily(fontFamily) {
        this._upload.text.style.fontFamily = fontFamily;
        return this;
    }
    fontSize(fontSize) {
        this._upload.text.style.fontSize = fontSize;
        return this;
    }
    fontWeight(fontWeight) {
        this._upload.text.style.fontWeight = fontWeight;
        return this;
    }
    textAlign(textAlign) {
        this._upload.text.style.textAlign = textAlign;
        return this;
    }
    textAlignVertical(textAlignVertical) {
        this._upload.text.style.textAlignVertical = textAlignVertical;
        return this;
    }
    textFillColor(fillColor) {
        this._upload.text.style.fillColor = fillColor;
        return this;
    }
    textFillOpacity(fillOpacity) {
        this._upload.text.style.fillOpacity = fillOpacity;
        return this;
    }
    textStrokeColor(strokeColor) {
        this._upload.text.style.strokeColor = strokeColor;
        return this;
    }
    textStrokeOpacity(strokeOpacity) {
        this._upload.text.style.strokeOpacity = strokeOpacity;
        return this;
    }
    textStrokeWidth(strokeWidth) {
        this._upload.text.style.strokeWidth = strokeWidth;
        return this;
    }
    textLineHeight(lineHeight) {
        this._upload.text.style.lineHeight = lineHeight;
        return this;
    }
    build() {
        return this._upload;
    }
}
