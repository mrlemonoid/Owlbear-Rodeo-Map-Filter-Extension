import { Matrix } from "../types/Matrix";
import { Vector2 } from "../types/Vector2";
import { Item } from "../types/items/Item";
/**
 * Math class for a 2D transformation Matrix
 * @example Find the relative transform between two items
 * ```ts
 * const a = buildShape().build();
 * const b = buildShape().build();
 *
 * const aTransform = MathM.fromItem(a);
 * const bTransform = MathM.fromItem(b);
 *
 * const invATransform = MathM.inverse(aTransform);
 * const relativeBTransform = MathM.multiply(invATransform, bTransform);
 * ```
 * @example Find the world position of a line's `startPosition`
 * ```ts
 * const line = buildLine().build();
 *
 * const lineTransform = MathM.fromItem(line);
 * const startTransform = MathM.fromPosition(line.startPosition);
 *
 * const worldTransform = MathM.multiply(lineTransform, startTransform);
 *
 * const worldPosition = MathM.decompose(worldTransform).position;
 * ```
 */
export declare class MathM {
    /**
     * @returns The inverse of the given `matrix`
     */
    static inverse(matrix: Matrix): Matrix;
    /**
     * @returns `a` multiplied by `b`
     */
    static multiply(a: Matrix, b: Matrix): Matrix;
    /**
     * Create a new transformation matrix from a position
     */
    static fromPosition(position: Vector2): Matrix;
    /**
     * Create a new transformation matrix from a rotation
     * @param rotation - rotation in degrees
     */
    static fromRotation(rotation: number): Matrix;
    /**
     * Create a new transformation matrix from a scale
     */
    static fromScale(scale: Vector2): Matrix;
    static fromItem(item: Item): Matrix;
    /**
     * Decompose matrix into its individual parts
     * Adapted from @link https://frederic-wang.fr/decomposition-of-2d-transform-matrices.html
     */
    static decompose(matrix: Matrix): {
        position: Vector2;
        scale: Vector2;
        /** Rotation in degrees */
        rotation: number;
    };
}
